{"version":3,"file":"ngx-cookie-service-ssr.mjs","sources":["../../../projects/ngx-cookie-service-ssr/src/lib/ssr-cookie.service.ts","../../../projects/ngx-cookie-service-ssr/src/public-api.ts","../../../projects/ngx-cookie-service-ssr/src/ngx-cookie-service-ssr.ts"],"sourcesContent":["import { CookieOptions, Request, Response } from 'express';\r\nimport { Inject, Injectable, InjectionToken, Optional, PLATFORM_ID } from '@angular/core';\r\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\r\n\r\n// Define the `Request` and `Response` token\r\nexport const REQUEST = new InjectionToken<Request>('REQUEST');\r\nexport const RESPONSE = new InjectionToken<Response>('RESPONSE');\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SsrCookieService {\r\n  private readonly documentIsAccessible: boolean;\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: Document,\r\n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\r\n    @Inject(PLATFORM_ID) private platformId: any,\r\n    @Optional() @Inject(REQUEST) private request: Request,\r\n    @Optional() @Inject(RESPONSE) private response: Response\r\n  ) {\r\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\r\n  }\r\n\r\n  /**\r\n   * Get cookie Regular Expression\r\n   *\r\n   * @param name Cookie name\r\n   * @returns property RegExp\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  static getCookieRegExp(name: string): RegExp {\r\n    const escapedName: string = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\r\n\r\n    return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\r\n  }\r\n\r\n  /**\r\n   * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n   *\r\n   * @param encodedURIComponent A value representing an encoded URI component.\r\n   *\r\n   * @returns The unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  static safeDecodeURIComponent(encodedURIComponent: string): string {\r\n    try {\r\n      return decodeURIComponent(encodedURIComponent);\r\n    } catch {\r\n      // probably it is not uri encoded. return as is\r\n      return encodedURIComponent;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts the provided cookie string to a key-value representation.\r\n   *\r\n   * @param cookieString - A concatenated string of cookies\r\n   * @returns Map - Key-value pairs of the provided cookies\r\n   *\r\n   * @author: Blake Ballard (blakeoxx)\r\n   * @since: 18.1.0\r\n   */\r\n  static cookieStringToMap(cookieString: string): Map<string, string> {\r\n    const cookies = new Map<string, string>;\r\n\r\n    if (cookieString?.length < 1) {\r\n      return cookies;\r\n    }\r\n\r\n    cookieString.split(';').forEach((currentCookie) => {\r\n      let [cookieName, cookieValue] = currentCookie.split('=');\r\n\r\n      // Remove any extra spaces from the beginning of cookie names. These are a side effect of browser/express cookie concatenation\r\n      cookieName = cookieName.replace(/^ +/, '');\r\n\r\n      cookies.set(SsrCookieService.safeDecodeURIComponent(cookieName), SsrCookieService.safeDecodeURIComponent(cookieValue));\r\n    });\r\n\r\n    return cookies;\r\n  }\r\n\r\n  /**\r\n   * Gets the current state of all cookies based on the request and response. Cookies added or changed in the response\r\n   * override any old values provided in the response.\r\n   *\r\n   * Client-side will always just return the document's cookies.\r\n   *\r\n   * @private\r\n   * @returns Map - All cookies from the request and response (or document) in key-value form.\r\n   *\r\n   * @author: Blake Ballard (blakeoxx)\r\n   * @since: 18.1.0\r\n   */\r\n  private getCombinedCookies(): Map<string, string> {\r\n    if (this.documentIsAccessible) {\r\n      return SsrCookieService.cookieStringToMap(this.document.cookie);\r\n    }\r\n\r\n    const requestCookies = SsrCookieService.cookieStringToMap(this.request?.headers.cookie || '');\r\n\r\n    let responseCookies: string | string[] = (this.response?.get('Set-Cookie') || []);\r\n    if (!Array.isArray(responseCookies)) {\r\n      responseCookies = [responseCookies];\r\n    }\r\n\r\n    let allCookies = new Map(requestCookies);\r\n    // Parse and merge response cookies with request cookies\r\n    responseCookies.forEach((currentCookie) => {\r\n      // Response cookie headers represent individual cookies and their options, so we parse them similar to other cookie strings, but slightly different\r\n      let [cookieName, cookieValue] = currentCookie.split(';')[0].split('=');\r\n      if (cookieName !== '') {\r\n        allCookies.set(SsrCookieService.safeDecodeURIComponent(cookieName), SsrCookieService.safeDecodeURIComponent(cookieValue));\r\n      }\r\n    });\r\n\r\n    return allCookies;\r\n  }\r\n\r\n  /**\r\n   * Return `true` if {@link Document} is accessible, otherwise return `false`\r\n   *\r\n   * @param name Cookie name\r\n   * @returns boolean - whether cookie with specified name exists\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  check(name: string): boolean {\r\n    if (this.documentIsAccessible) {\r\n      // Client-side cookie check\r\n      name = encodeURIComponent(name);\r\n      const regExp: RegExp = SsrCookieService.getCookieRegExp(name);\r\n      return regExp.test(this.document.cookie);\r\n    } else {\r\n      // Server-side cookie check considering incoming cookies from the request and already set cookies on the response\r\n      const allCookies = this.getCombinedCookies();\r\n      return allCookies.has(name);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get cookies by name\r\n   *\r\n   * @param name Cookie name\r\n   * @returns property value\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  get(name: string): string {\r\n    if (this.check(name)) {\r\n      if (this.documentIsAccessible) {\r\n        // Client-side cookie getter\r\n        name = encodeURIComponent(name);\r\n\r\n        const regExp: RegExp = SsrCookieService.getCookieRegExp(name);\r\n        const result: RegExpExecArray = regExp.exec(this.document.cookie);\r\n\r\n        return result[1] ? SsrCookieService.safeDecodeURIComponent(result[1]) : '';\r\n      } else {\r\n        // Server-side cookie getter including preset cookies from request and new cookies from response\r\n        const allCookies = this.getCombinedCookies();\r\n        return (allCookies.get(name) || '');\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all cookies in JSON format\r\n   *\r\n   * @returns all the cookies in json\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  getAll(): { [key: string]: string } {\r\n    const cookies: { [key: string]: string } = {};\r\n\r\n    if (this.documentIsAccessible) {\r\n      // Client-side cookie getter based on cookie strings\r\n      const cookieString: any = this.document?.cookie;\r\n\r\n      if (cookieString && cookieString !== '') {\r\n        cookieString.split(';').forEach((currentCookie) => {\r\n          const [cookieName, cookieValue] = currentCookie.split('=');\r\n          cookies[SsrCookieService.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = SsrCookieService.safeDecodeURIComponent(cookieValue);\r\n        });\r\n      }\r\n    } else {\r\n      // Server-side cookie getter including preset cookies from request and new cookies from response\r\n      const allCookies = this.getCombinedCookies();\r\n      allCookies.forEach((cookieValue, cookieName) => {\r\n        cookies[cookieName] = cookieValue;\r\n      });\r\n    }\r\n\r\n    return cookies;\r\n  }\r\n\r\n  /**\r\n   * Set cookie based on provided information\r\n   *\r\n   * @param name     Cookie name\r\n   * @param value    Cookie value\r\n   * @param expires  Number of days until the cookies expires or an actual `Date`\r\n   * @param path     Cookie path\r\n   * @param domain   Cookie domain\r\n   * @param secure   Secure flag\r\n   * @param sameSite OWASP same site token `Lax`, `None`, or `Strict`. Defaults to `Lax`\r\n   * @param partitioned Partitioned flag\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  set(\r\n    name: string,\r\n    value: string,\r\n    expires?: number | Date,\r\n    path?: string,\r\n    domain?: string,\r\n    secure?: boolean,\r\n    sameSite?: 'Lax' | 'None' | 'Strict',\r\n    partitioned?: boolean\r\n  ): void;\r\n\r\n  /**\r\n   * Set cookie based on provided information\r\n   *\r\n   * Cookie's parameters:\r\n   * <pre>\r\n   * expires  Number of days until the cookies expires or an actual `Date`\r\n   * path     Cookie path\r\n   * domain   Cookie domain\r\n   * secure Cookie secure flag\r\n   * sameSite OWASP same site token `Lax`, `None`, or `Strict`. Defaults to `Lax`\r\n   * </pre>\r\n   *\r\n   * @param name     Cookie name\r\n   * @param value    Cookie value\r\n   * @param options  Body with cookie's params\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  set(\r\n    name: string,\r\n    value: string,\r\n    options?: {\r\n      expires?: number | Date;\r\n      path?: string;\r\n      domain?: string;\r\n      secure?: boolean;\r\n      sameSite?: 'Lax' | 'None' | 'Strict';\r\n      partitioned?: boolean;\r\n    }\r\n  ): void;\r\n\r\n  set(\r\n    name: string,\r\n    value: string,\r\n    expiresOrOptions?: number | Date | any,\r\n    path?: string,\r\n    domain?: string,\r\n    secure?: boolean,\r\n    sameSite?: 'Lax' | 'None' | 'Strict',\r\n    partitioned?: boolean\r\n  ): void {\r\n    if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\r\n      const optionsBody = {\r\n        expires: expiresOrOptions,\r\n        path,\r\n        domain,\r\n        secure,\r\n        sameSite: sameSite ? sameSite : 'Lax',\r\n        partitioned,\r\n      };\r\n\r\n      this.set(name, value, optionsBody);\r\n      return;\r\n    }\r\n\r\n    const options = expiresOrOptions ? expiresOrOptions : {};\r\n    const outputOptions: CookieOptions = {};\r\n\r\n    if (options.expires) {\r\n      if (typeof options.expires === 'number') {\r\n        const dateExpires: Date = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\r\n\r\n        outputOptions.expires = dateExpires;\r\n      } else {\r\n        outputOptions.expires = options.expires;\r\n      }\r\n    }\r\n\r\n    if (options.path) {\r\n      outputOptions.path = options.path;\r\n    }\r\n\r\n    if (options.domain) {\r\n      outputOptions.domain = options.domain;\r\n    }\r\n\r\n    if (options.secure === false && options.sameSite === 'None') {\r\n      options.secure = true;\r\n      console.warn(\r\n        `[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\r\n          `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`\r\n      );\r\n    }\r\n    if (options.secure) {\r\n      outputOptions.secure = options.secure;\r\n    }\r\n\r\n    if (!options.sameSite) {\r\n      options.sameSite = 'Lax';\r\n    }\r\n\r\n    outputOptions.sameSite = options.sameSite.toLowerCase() as ('lax' | 'none' | 'strict');\r\n\r\n    if (options.partitioned) {\r\n      outputOptions.partitioned = options.partitioned;\r\n    }\r\n\r\n    if (this.documentIsAccessible) {\r\n      // Set the client-side cookie (a string of the form `cookieName=cookieValue;opt1=optValue;opt2=optValue;`)\r\n      let cookieString: string = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\r\n\r\n      // Step through each option, appending it to the cookie string depending on it's type\r\n      for (const optionName of Object.keys(outputOptions)) {\r\n        const optionValue: unknown = outputOptions[optionName];\r\n        if (optionValue instanceof Date) {\r\n          cookieString += `${optionName}=${optionValue.toUTCString()};`;\r\n        } else if (typeof optionValue === 'boolean') {\r\n          if (optionValue) {\r\n            cookieString += `${optionName};`;\r\n          }\r\n        } else if (typeof optionValue === 'string' || typeof optionValue === 'number') {\r\n          cookieString += `${optionName}=${optionValue};`;\r\n        }\r\n      }\r\n\r\n      this.document.cookie = cookieString;\r\n    } else {\r\n      // Set the server-side cookie (on the response, to be picked up by the client)\r\n      this.response?.cookie(name, value, outputOptions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete cookie by name\r\n   *\r\n   * @param name   Cookie name\r\n   * @param path   Cookie path\r\n   * @param domain Cookie domain\r\n   * @param secure Cookie secure flag\r\n   * @param sameSite Cookie sameSite flag - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  delete(name: string, path?: string, domain?: string, secure?: boolean, sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'): void {\r\n    const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\r\n    this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\r\n  }\r\n\r\n  /**\r\n   * Delete all cookies\r\n   *\r\n   * @param path   Cookie path\r\n   * @param domain Cookie domain\r\n   * @param secure Is the Cookie secure\r\n   * @param sameSite Is the cookie same site\r\n   *\r\n   * @author: Stepan Suvorov\r\n   * @since: 1.0.0\r\n   */\r\n  deleteAll(path?: string, domain?: string, secure?: boolean, sameSite: 'Lax' | 'None' | 'Strict' = 'Lax'): void {\r\n    const cookies: any = this.getAll();\r\n\r\n    for (const cookieName in cookies) {\r\n      if (cookies.hasOwnProperty(cookieName)) {\r\n        this.delete(cookieName, path, domain, secure, sameSite);\r\n      }\r\n    }\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ngx-cookie-service-ssr\r\n */\r\n\r\nexport * from './lib/ssr-cookie.service';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}